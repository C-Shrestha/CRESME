// <auto-generated />
using System;
using CRESME.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRESME.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230523155941_merge2Muaaz")]
    partial class merge2Muaaz
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CRESME.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CRESME.Data.Quiz", b =>
                {
                    b.Property<string>("QuizName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlockAssignment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseAssignment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosticA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosticB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosticC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosticD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedBackA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackEnabled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image10Pos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image1Pos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2Pos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3Pos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image4Pos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image5Pos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image6Pos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image7Pos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image8Pos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image9Pos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordsA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordsB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordsC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWordsD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIDAssignment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumImages")
                        .HasColumnType("int");

                    b.Property<string>("PatientIntro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Published")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("imageFile0")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageFile1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageFile2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageFile3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageFile4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageFile5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageFile6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageFile7")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuizName");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("CRESME.Data.Test", b =>
                {
                    b.Property<string>("Course")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Course");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CRESME.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CRESME.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRESME.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CRESME.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
